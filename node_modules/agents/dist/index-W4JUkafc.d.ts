import { BaseEvent, MCPObservabilityEvent } from "./mcp-BEwaCsxO.js";

//#region src/observability/agent.d.ts

/**
 * Agent-specific observability events
 * These track the lifecycle and operations of an Agent
 */
type AgentObservabilityEvent =
  | BaseEvent<"state:update", {}>
  | BaseEvent<
      "rpc",
      {
        method: string;
        streaming?: boolean;
      }
    >
  | BaseEvent<"message:request" | "message:response", {}>
  | BaseEvent<"message:clear">
  | BaseEvent<
      "schedule:create" | "schedule:execute" | "schedule:cancel",
      {
        callback: string;
        id: string;
      }
    >
  | BaseEvent<"destroy">
  | BaseEvent<
      "connect",
      {
        connectionId: string;
      }
    >;
//#endregion
//#region src/observability/index.d.ts
/**
 * Union of all observability event types from different domains
 */
type ObservabilityEvent = AgentObservabilityEvent | MCPObservabilityEvent;
interface Observability {
  /**
   * Emit an event for the Agent's observability implementation to handle.
   * @param event - The event to emit
   * @param ctx - The execution context of the invocation (optional)
   */
  emit(event: ObservabilityEvent, ctx?: DurableObjectState): void;
}
/**
 * A generic observability implementation that logs events to the console.
 */
declare const genericObservability: Observability;
//#endregion
export { Observability, ObservabilityEvent, genericObservability };
//# sourceMappingURL=index-W4JUkafc.d.ts.map
