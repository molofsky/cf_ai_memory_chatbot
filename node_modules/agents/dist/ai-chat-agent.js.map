{"version":3,"file":"ai-chat-agent.js","names":["data: IncomingMessage","message: ChatMessage","activeTextParts: Record<string, TextUIPart>","activeReasoningParts: Record<string, ReasoningUIPart>","partialToolCalls: Record<\n        string,\n        { text: string; index: number; toolName: string; dynamic?: boolean }\n      >","part","data: UIMessageChunk","textPart: TextUIPart","reasoningPart: ReasoningUIPart"],"sources":["../src/ai-chat-agent.ts"],"sourcesContent":["import type {\n  UIMessage as ChatMessage,\n  DynamicToolUIPart,\n  ProviderMetadata,\n  ReasoningUIPart,\n  StreamTextOnFinishCallback,\n  TextUIPart,\n  ToolSet,\n  ToolUIPart,\n  UIMessageChunk\n} from \"ai\";\nimport { Agent, type AgentContext, type Connection, type WSMessage } from \"./\";\nimport {\n  MessageType,\n  type IncomingMessage,\n  type OutgoingMessage\n} from \"./ai-types\";\nimport { autoTransformMessages } from \"./ai-chat-v5-migration\";\n\nconst decoder = new TextDecoder();\n\n/**\n * Extension of Agent with built-in chat capabilities\n * @template Env Environment type containing bindings\n */\nexport class AIChatAgent<Env = unknown, State = unknown> extends Agent<\n  Env,\n  State\n> {\n  /**\n   * Map of message `id`s to `AbortController`s\n   * useful to propagate request cancellation signals for any external calls made by the agent\n   */\n  private _chatMessageAbortControllers: Map<string, AbortController>;\n  /** Array of chat messages for the current conversation */\n  messages: ChatMessage[];\n  constructor(ctx: AgentContext, env: Env) {\n    super(ctx, env);\n    this.sql`create table if not exists cf_ai_chat_agent_messages (\n      id text primary key,\n      message text not null,\n      created_at datetime default current_timestamp\n    )`;\n\n    // Load messages and automatically transform them to v5 format\n    const rawMessages = this._loadMessagesFromDb();\n\n    // Automatic migration following https://jhak.im/blog/ai-sdk-migration-handling-previously-saved-messages\n    this.messages = autoTransformMessages(rawMessages);\n\n    this._chatMessageAbortControllers = new Map();\n  }\n\n  private _broadcastChatMessage(message: OutgoingMessage, exclude?: string[]) {\n    this.broadcast(JSON.stringify(message), exclude);\n  }\n\n  private _loadMessagesFromDb(): ChatMessage[] {\n    const rows =\n      this.sql`select * from cf_ai_chat_agent_messages order by created_at` ||\n      [];\n    return rows\n      .map((row) => {\n        try {\n          return JSON.parse(row.message as string);\n        } catch (error) {\n          console.error(`Failed to parse message ${row.id}:`, error);\n          return null;\n        }\n      })\n      .filter((msg): msg is ChatMessage => msg !== null);\n  }\n\n  override async onMessage(connection: Connection, message: WSMessage) {\n    if (typeof message === \"string\") {\n      let data: IncomingMessage;\n      try {\n        data = JSON.parse(message) as IncomingMessage;\n      } catch (_error) {\n        // silently ignore invalid messages for now\n        // TODO: log errors with log levels\n        return;\n      }\n      if (\n        data.type === MessageType.CF_AGENT_USE_CHAT_REQUEST &&\n        data.init.method === \"POST\"\n      ) {\n        const {\n          // method,\n          // keepalive,\n          // headers,\n          body // we're reading this\n          //\n          // // these might not exist?\n          // dispatcher,\n          // duplex\n        } = data.init;\n        const { messages } = JSON.parse(body as string);\n\n        // Automatically transform any incoming messages\n        const transformedMessages = autoTransformMessages(messages);\n\n        this._broadcastChatMessage(\n          {\n            messages: transformedMessages,\n            type: MessageType.CF_AGENT_CHAT_MESSAGES\n          },\n          [connection.id]\n        );\n\n        await this.persistMessages(transformedMessages, [connection.id]);\n\n        this.observability?.emit(\n          {\n            displayMessage: \"Chat message request\",\n            id: data.id,\n            payload: {},\n            timestamp: Date.now(),\n            type: \"message:request\"\n          },\n          this.ctx\n        );\n\n        const chatMessageId = data.id;\n        const abortSignal = this._getAbortSignal(chatMessageId);\n\n        return this._tryCatchChat(async () => {\n          const response = await this.onChatMessage(\n            async (_finishResult) => {\n              this._removeAbortController(chatMessageId);\n\n              this.observability?.emit(\n                {\n                  displayMessage: \"Chat message response\",\n                  id: data.id,\n                  payload: {},\n                  timestamp: Date.now(),\n                  type: \"message:response\"\n                },\n                this.ctx\n              );\n\n              // Note: Message persistence now happens in the _reply method\n              // after the complete response text has been accumulated\n            },\n            abortSignal ? { abortSignal } : undefined\n          );\n\n          if (response) {\n            await this._reply(data.id, response);\n          } else {\n            // Log a warning for observability\n            console.warn(\n              `[AIChatAgent] onChatMessage returned no response for chatMessageId: ${chatMessageId}`\n            );\n            // Send a fallback message to the client\n            this._broadcastChatMessage(\n              {\n                body: \"No response was generated by the agent.\",\n                done: true,\n                id: data.id,\n                type: MessageType.CF_AGENT_USE_CHAT_RESPONSE\n              },\n              [connection.id]\n            );\n          }\n        });\n      }\n      if (data.type === MessageType.CF_AGENT_CHAT_CLEAR) {\n        this._destroyAbortControllers();\n        this.sql`delete from cf_ai_chat_agent_messages`;\n        this.messages = [];\n        this._broadcastChatMessage(\n          {\n            type: MessageType.CF_AGENT_CHAT_CLEAR\n          },\n          [connection.id]\n        );\n      } else if (data.type === MessageType.CF_AGENT_CHAT_MESSAGES) {\n        // replace the messages with the new ones, automatically transformed\n        const transformedMessages = autoTransformMessages(data.messages);\n        await this.persistMessages(transformedMessages, [connection.id]);\n      } else if (data.type === MessageType.CF_AGENT_CHAT_REQUEST_CANCEL) {\n        // propagate an abort signal for the associated request\n        this._cancelChatRequest(data.id);\n      }\n    }\n  }\n\n  override async onRequest(request: Request): Promise<Response> {\n    return this._tryCatchChat(() => {\n      const url = new URL(request.url);\n      if (url.pathname.endsWith(\"/get-messages\")) {\n        const messages = this._loadMessagesFromDb();\n        return Response.json(messages);\n      }\n      return super.onRequest(request);\n    });\n  }\n\n  private async _tryCatchChat<T>(fn: () => T | Promise<T>) {\n    try {\n      return await fn();\n    } catch (e) {\n      throw this.onError(e);\n    }\n  }\n\n  /**\n   * Handle incoming chat messages and generate a response\n   * @param onFinish Callback to be called when the response is finished\n   * @param options.signal A signal to pass to any child requests which can be used to cancel them\n   * @returns Response to send to the client or undefined\n   */\n  async onChatMessage(\n    // biome-ignore lint/correctness/noUnusedFunctionParameters: overridden later\n    onFinish: StreamTextOnFinishCallback<ToolSet>,\n    // biome-ignore lint/correctness/noUnusedFunctionParameters: overridden later\n    options?: { abortSignal: AbortSignal | undefined }\n  ): Promise<Response | undefined> {\n    throw new Error(\n      \"recieved a chat message, override onChatMessage and return a Response to send to the client\"\n    );\n  }\n\n  /**\n   * Save messages on the server side\n   * @param messages Chat messages to save\n   */\n  async saveMessages(messages: ChatMessage[]) {\n    await this.persistMessages(messages);\n    await this._tryCatchChat(async () => {\n      const response = await this.onChatMessage(() => {});\n      if (response) this._reply(crypto.randomUUID(), response);\n    });\n  }\n\n  async persistMessages(\n    messages: ChatMessage[],\n    excludeBroadcastIds: string[] = []\n  ) {\n    for (const message of messages) {\n      this.sql`\n        insert into cf_ai_chat_agent_messages (id, message)\n        values (${message.id}, ${JSON.stringify(message)})\n        on conflict(id) do update set message = excluded.message\n      `;\n    }\n\n    // refresh in-memory messages\n    const persisted = this._loadMessagesFromDb();\n    this.messages = autoTransformMessages(persisted);\n    this._broadcastChatMessage(\n      {\n        messages: messages,\n        type: MessageType.CF_AGENT_CHAT_MESSAGES\n      },\n      excludeBroadcastIds\n    );\n  }\n\n  private async _reply(id: string, response: Response) {\n    return this._tryCatchChat(async () => {\n      if (!response.body) {\n        // Send empty response if no body\n        this._broadcastChatMessage({\n          body: \"\",\n          done: true,\n          id,\n          type: MessageType.CF_AGENT_USE_CHAT_RESPONSE\n        });\n        return;\n      }\n\n      /* Lazy loading ai sdk, because putting it in module scope is\n       * causing issues with startup time.\n       * The only place it's used is in _reply, which only matters after\n       * a chat message is received.\n       * So it's safe to delay loading it until a chat message is received.\n       */\n      const { getToolName, isToolUIPart, parsePartialJson } = await import(\n        \"ai\"\n      );\n\n      const reader = response.body.getReader();\n\n      // Parsing state adapted from:\n      // https://github.com/vercel/ai/blob/main/packages/ai/src/ui-message-stream/ui-message-chunks.ts#L295\n      const message: ChatMessage = {\n        id: `assistant_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`, // default\n        role: \"assistant\",\n        parts: []\n      };\n      let activeTextParts: Record<string, TextUIPart> = {};\n      let activeReasoningParts: Record<string, ReasoningUIPart> = {};\n      const partialToolCalls: Record<\n        string,\n        { text: string; index: number; toolName: string; dynamic?: boolean }\n      > = {};\n\n      function updateDynamicToolPart(\n        options: {\n          toolName: string;\n          toolCallId: string;\n          providerExecuted?: boolean;\n        } & (\n          | {\n              state: \"input-streaming\";\n              input: unknown;\n            }\n          | {\n              state: \"input-available\";\n              input: unknown;\n              providerMetadata?: ProviderMetadata;\n            }\n          | {\n              state: \"output-available\";\n              input: unknown;\n              output: unknown;\n              preliminary: boolean | undefined;\n            }\n          | {\n              state: \"output-error\";\n              input: unknown;\n              errorText: string;\n              providerMetadata?: ProviderMetadata;\n            }\n        )\n      ) {\n        const part = message.parts.find(\n          (part) =>\n            part.type === \"dynamic-tool\" &&\n            part.toolCallId === options.toolCallId\n        ) as DynamicToolUIPart | undefined;\n\n        const anyOptions = options as Record<string, unknown>;\n        const anyPart = part as Record<string, unknown>;\n\n        if (part != null) {\n          part.state = options.state;\n          anyPart.toolName = options.toolName;\n          anyPart.input = anyOptions.input;\n          anyPart.output = anyOptions.output;\n          anyPart.errorText = anyOptions.errorText;\n          anyPart.rawInput = anyOptions.rawInput ?? anyPart.rawInput;\n          anyPart.preliminary = anyOptions.preliminary;\n\n          if (\n            anyOptions.providerMetadata != null &&\n            part.state === \"input-available\"\n          ) {\n            part.callProviderMetadata =\n              anyOptions.providerMetadata as ProviderMetadata;\n          }\n        } else {\n          message.parts.push({\n            type: \"dynamic-tool\",\n            toolName: options.toolName,\n            toolCallId: options.toolCallId,\n            state: options.state,\n            input: anyOptions.input,\n            output: anyOptions.output,\n            errorText: anyOptions.errorText,\n            preliminary: anyOptions.preliminary,\n            ...(anyOptions.providerMetadata != null\n              ? { callProviderMetadata: anyOptions.providerMetadata }\n              : {})\n          } as DynamicToolUIPart);\n        }\n      }\n\n      function updateToolPart(\n        options: {\n          toolName: string;\n          toolCallId: string;\n          providerExecuted?: boolean;\n        } & (\n          | {\n              state: \"input-streaming\";\n              input: unknown;\n              providerExecuted?: boolean;\n            }\n          | {\n              state: \"input-available\";\n              input: unknown;\n              providerExecuted?: boolean;\n              providerMetadata?: ProviderMetadata;\n            }\n          | {\n              state: \"output-available\";\n              input: unknown;\n              output: unknown;\n              providerExecuted?: boolean;\n              preliminary?: boolean;\n            }\n          | {\n              state: \"output-error\";\n              input: unknown;\n              rawInput?: unknown;\n              errorText: string;\n              providerExecuted?: boolean;\n              providerMetadata?: ProviderMetadata;\n            }\n        )\n      ) {\n        const part = message.parts.find(\n          (part) =>\n            isToolUIPart(part) &&\n            (part as ToolUIPart).toolCallId === options.toolCallId\n        ) as ToolUIPart | undefined;\n\n        const anyOptions = options as Record<string, unknown>;\n        const anyPart = part as Record<string, unknown>;\n\n        if (part != null) {\n          part.state = options.state;\n          anyPart.input = anyOptions.input;\n          anyPart.output = anyOptions.output;\n          anyPart.errorText = anyOptions.errorText;\n          anyPart.rawInput = anyOptions.rawInput;\n          anyPart.preliminary = anyOptions.preliminary;\n\n          // once providerExecuted is set, it stays for streaming\n          anyPart.providerExecuted =\n            anyOptions.providerExecuted ?? part.providerExecuted;\n\n          if (\n            anyOptions.providerMetadata != null &&\n            part.state === \"input-available\"\n          ) {\n            part.callProviderMetadata =\n              anyOptions.providerMetadata as ProviderMetadata;\n          }\n        } else {\n          message.parts.push({\n            type: `tool-${options.toolName}`,\n            toolCallId: options.toolCallId,\n            state: options.state,\n            input: anyOptions.input,\n            output: anyOptions.output,\n            rawInput: anyOptions.rawInput,\n            errorText: anyOptions.errorText,\n            providerExecuted: anyOptions.providerExecuted,\n            preliminary: anyOptions.preliminary,\n            ...(anyOptions.providerMetadata != null\n              ? { callProviderMetadata: anyOptions.providerMetadata }\n              : {})\n          } as ToolUIPart);\n        }\n      }\n\n      async function updateMessageMetadata(metadata: unknown) {\n        if (metadata != null) {\n          const mergedMetadata =\n            message.metadata != null\n              ? { ...message.metadata, ...metadata } // TODO: do proper merging\n              : metadata;\n\n          message.metadata = mergedMetadata;\n        }\n      }\n\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) {\n            // Send final completion signal\n            this._broadcastChatMessage({\n              body: \"\",\n              done: true,\n              id,\n              type: MessageType.CF_AGENT_USE_CHAT_RESPONSE\n            });\n            break;\n          }\n\n          const chunk = decoder.decode(value);\n\n          // Determine response format based on content-type\n          const contentType = response.headers.get(\"content-type\") || \"\";\n          const isSSE = contentType.includes(\"text/event-stream\");\n\n          // After streaming is complete, persist the complete assistant's response\n          if (isSSE) {\n            // Parse AI SDK v5 SSE format and extract text deltas\n            const lines = chunk.split(\"\\n\");\n            for (const line of lines) {\n              if (line.startsWith(\"data: \") && line !== \"data: [DONE]\") {\n                try {\n                  const data: UIMessageChunk = JSON.parse(line.slice(6)); // Remove 'data: ' prefix\n                  switch (data.type) {\n                    case \"text-start\": {\n                      const textPart: TextUIPart = {\n                        type: \"text\",\n                        text: \"\",\n                        providerMetadata: data.providerMetadata,\n                        state: \"streaming\"\n                      };\n                      activeTextParts[data.id] = textPart;\n                      message.parts.push(textPart);\n                      break;\n                    }\n\n                    case \"text-delta\": {\n                      const textPart = activeTextParts[data.id];\n                      textPart.text += data.delta;\n                      textPart.providerMetadata =\n                        data.providerMetadata ?? textPart.providerMetadata;\n                      break;\n                    }\n\n                    case \"text-end\": {\n                      const textPart = activeTextParts[data.id];\n                      textPart.state = \"done\";\n                      textPart.providerMetadata =\n                        data.providerMetadata ?? textPart.providerMetadata;\n                      delete activeTextParts[data.id];\n                      break;\n                    }\n\n                    case \"reasoning-start\": {\n                      const reasoningPart: ReasoningUIPart = {\n                        type: \"reasoning\",\n                        text: \"\",\n                        providerMetadata: data.providerMetadata,\n                        state: \"streaming\"\n                      };\n                      activeReasoningParts[data.id] = reasoningPart;\n                      message.parts.push(reasoningPart);\n                      break;\n                    }\n\n                    case \"reasoning-delta\": {\n                      const reasoningPart = activeReasoningParts[data.id];\n                      reasoningPart.text += data.delta;\n                      reasoningPart.providerMetadata =\n                        data.providerMetadata ?? reasoningPart.providerMetadata;\n                      break;\n                    }\n\n                    case \"reasoning-end\": {\n                      const reasoningPart = activeReasoningParts[data.id];\n                      reasoningPart.providerMetadata =\n                        data.providerMetadata ?? reasoningPart.providerMetadata;\n                      reasoningPart.state = \"done\";\n                      delete activeReasoningParts[data.id];\n\n                      break;\n                    }\n\n                    case \"file\": {\n                      message.parts.push({\n                        type: \"file\",\n                        mediaType: data.mediaType,\n                        url: data.url\n                      });\n\n                      break;\n                    }\n\n                    case \"source-url\": {\n                      message.parts.push({\n                        type: \"source-url\",\n                        sourceId: data.sourceId,\n                        url: data.url,\n                        title: data.title,\n                        providerMetadata: data.providerMetadata\n                      });\n\n                      break;\n                    }\n\n                    case \"source-document\": {\n                      message.parts.push({\n                        type: \"source-document\",\n                        sourceId: data.sourceId,\n                        mediaType: data.mediaType,\n                        title: data.title,\n                        filename: data.filename,\n                        providerMetadata: data.providerMetadata\n                      });\n\n                      break;\n                    }\n\n                    case \"tool-input-start\": {\n                      const toolInvocations =\n                        message.parts.filter(isToolUIPart);\n\n                      // add the partial tool call to the map\n                      partialToolCalls[data.toolCallId] = {\n                        text: \"\",\n                        toolName: data.toolName,\n                        index: toolInvocations.length,\n                        dynamic: data.dynamic\n                      };\n\n                      if (data.dynamic) {\n                        updateDynamicToolPart({\n                          toolCallId: data.toolCallId,\n                          toolName: data.toolName,\n                          state: \"input-streaming\",\n                          input: undefined\n                        });\n                      } else {\n                        updateToolPart({\n                          toolCallId: data.toolCallId,\n                          toolName: data.toolName,\n                          state: \"input-streaming\",\n                          input: undefined\n                        });\n                      }\n\n                      break;\n                    }\n\n                    case \"tool-input-delta\": {\n                      const partialToolCall = partialToolCalls[data.toolCallId];\n\n                      partialToolCall.text += data.inputTextDelta;\n\n                      const partialArgsResult = await parsePartialJson(\n                        partialToolCall.text\n                      );\n                      const partialArgs = (\n                        partialArgsResult as { value: Record<string, unknown> }\n                      ).value;\n\n                      if (partialToolCall.dynamic) {\n                        updateDynamicToolPart({\n                          toolCallId: data.toolCallId,\n                          toolName: partialToolCall.toolName,\n                          state: \"input-streaming\",\n                          input: partialArgs\n                        });\n                      } else {\n                        updateToolPart({\n                          toolCallId: data.toolCallId,\n                          toolName: partialToolCall.toolName,\n                          state: \"input-streaming\",\n                          input: partialArgs\n                        });\n                      }\n\n                      break;\n                    }\n\n                    case \"tool-input-available\": {\n                      if (data.dynamic) {\n                        updateDynamicToolPart({\n                          toolCallId: data.toolCallId,\n                          toolName: data.toolName,\n                          state: \"input-available\",\n                          input: data.input,\n                          providerMetadata: data.providerMetadata\n                        });\n                      } else {\n                        updateToolPart({\n                          toolCallId: data.toolCallId,\n                          toolName: data.toolName,\n                          state: \"input-available\",\n                          input: data.input,\n                          providerExecuted: data.providerExecuted,\n                          providerMetadata: data.providerMetadata\n                        });\n                      }\n\n                      // TODO: Do we want to expose onToolCall?\n\n                      // invoke the onToolCall callback if it exists. This is blocking.\n                      // In the future we should make this non-blocking, which\n                      // requires additional state management for error handling etc.\n                      // Skip calling onToolCall for provider-executed tools since they are already executed\n                      // if (onToolCall && !data.providerExecuted) {\n                      //   await onToolCall({\n                      //     toolCall: data\n                      //   });\n                      // }\n                      break;\n                    }\n\n                    case \"tool-input-error\": {\n                      if (data.dynamic) {\n                        updateDynamicToolPart({\n                          toolCallId: data.toolCallId,\n                          toolName: data.toolName,\n                          state: \"output-error\",\n                          input: data.input,\n                          errorText: data.errorText,\n                          providerMetadata: data.providerMetadata\n                        });\n                      } else {\n                        updateToolPart({\n                          toolCallId: data.toolCallId,\n                          toolName: data.toolName,\n                          state: \"output-error\",\n                          input: undefined,\n                          rawInput: data.input,\n                          errorText: data.errorText,\n                          providerExecuted: data.providerExecuted,\n                          providerMetadata: data.providerMetadata\n                        });\n                      }\n\n                      break;\n                    }\n\n                    case \"tool-output-available\": {\n                      if (data.dynamic) {\n                        const toolInvocations = message.parts.filter(\n                          (part) => part.type === \"dynamic-tool\"\n                        ) as DynamicToolUIPart[];\n\n                        const toolInvocation = toolInvocations.find(\n                          (invocation) =>\n                            invocation.toolCallId === data.toolCallId\n                        );\n\n                        if (!toolInvocation)\n                          throw new Error(\"Tool invocation not found\");\n\n                        updateDynamicToolPart({\n                          toolCallId: data.toolCallId,\n                          toolName: toolInvocation.toolName,\n                          state: \"output-available\",\n                          input: toolInvocation.input,\n                          output: data.output,\n                          preliminary: data.preliminary\n                        });\n                      } else {\n                        const toolInvocations = message.parts.filter(\n                          isToolUIPart\n                        ) as ToolUIPart[];\n\n                        const toolInvocation = toolInvocations.find(\n                          (invocation) =>\n                            invocation.toolCallId === data.toolCallId\n                        );\n\n                        if (!toolInvocation)\n                          throw new Error(\"Tool invocation not found\");\n\n                        updateToolPart({\n                          toolCallId: data.toolCallId,\n                          toolName: getToolName(toolInvocation),\n                          state: \"output-available\",\n                          input: toolInvocation.input,\n                          output: data.output,\n                          providerExecuted: data.providerExecuted,\n                          preliminary: data.preliminary\n                        });\n                      }\n\n                      break;\n                    }\n\n                    case \"tool-output-error\": {\n                      if (data.dynamic) {\n                        const toolInvocations = message.parts.filter(\n                          (part) => part.type === \"dynamic-tool\"\n                        ) as DynamicToolUIPart[];\n\n                        const toolInvocation = toolInvocations.find(\n                          (invocation) =>\n                            invocation.toolCallId === data.toolCallId\n                        );\n\n                        if (!toolInvocation)\n                          throw new Error(\"Tool invocation not found\");\n\n                        updateDynamicToolPart({\n                          toolCallId: data.toolCallId,\n                          toolName: toolInvocation.toolName,\n                          state: \"output-error\",\n                          input: toolInvocation.input,\n                          errorText: data.errorText\n                        });\n                      } else {\n                        const toolInvocations = message.parts.filter(\n                          isToolUIPart\n                        ) as ToolUIPart[];\n\n                        const toolInvocation = toolInvocations.find(\n                          (invocation) =>\n                            invocation.toolCallId === data.toolCallId\n                        );\n\n                        if (!toolInvocation)\n                          throw new Error(\"Tool invocation not found\");\n                        updateToolPart({\n                          toolCallId: data.toolCallId,\n                          toolName: getToolName(toolInvocation),\n                          state: \"output-error\",\n                          input: toolInvocation.input,\n                          rawInput:\n                            \"rawInput\" in toolInvocation\n                              ? toolInvocation.rawInput\n                              : undefined,\n                          errorText: data.errorText\n                        });\n                      }\n\n                      break;\n                    }\n\n                    case \"start-step\": {\n                      // add a step boundary part to the message\n                      message.parts.push({ type: \"step-start\" });\n                      break;\n                    }\n\n                    case \"finish-step\": {\n                      // reset the current text and reasoning parts\n                      activeTextParts = {};\n                      activeReasoningParts = {};\n                      break;\n                    }\n\n                    case \"start\": {\n                      if (data.messageId != null) {\n                        message.id = data.messageId;\n                      }\n\n                      await updateMessageMetadata(data.messageMetadata);\n\n                      break;\n                    }\n\n                    case \"finish\": {\n                      await updateMessageMetadata(data.messageMetadata);\n                      break;\n                    }\n\n                    case \"message-metadata\": {\n                      await updateMessageMetadata(data.messageMetadata);\n                      break;\n                    }\n\n                    case \"error\": {\n                      this._broadcastChatMessage({\n                        error: true,\n                        body: data.errorText ?? JSON.stringify(data),\n                        done: false,\n                        id,\n                        type: MessageType.CF_AGENT_USE_CHAT_RESPONSE\n                      });\n\n                      break;\n                    }\n                    // Do we want to handle data parts?\n                  }\n\n                  // Always forward the raw part to the client\n                  this._broadcastChatMessage({\n                    body: JSON.stringify(data),\n                    done: false,\n                    id,\n                    type: MessageType.CF_AGENT_USE_CHAT_RESPONSE\n                  });\n                } catch (_e) {\n                  // Skip malformed JSON lines silently\n                }\n              }\n            }\n          } else {\n            // Handle plain text responses (e.g., from generateText)\n            // Treat the entire chunk as a text delta to preserve exact formatting\n            if (chunk.length > 0) {\n              message.parts.push({ type: \"text\", text: chunk });\n              // Synthesize a text-delta event so clients can stream-render\n              this._broadcastChatMessage({\n                body: JSON.stringify({ type: \"text-delta\", delta: chunk }),\n                done: false,\n                id,\n                type: MessageType.CF_AGENT_USE_CHAT_RESPONSE\n              });\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n\n      if (message.parts.length > 0) {\n        await this.persistMessages([...this.messages, message]);\n      }\n    });\n  }\n\n  /**\n   * For the given message id, look up its associated AbortController\n   * If the AbortController does not exist, create and store one in memory\n   *\n   * returns the AbortSignal associated with the AbortController\n   */\n  private _getAbortSignal(id: string): AbortSignal | undefined {\n    // Defensive check, since we're coercing message types at the moment\n    if (typeof id !== \"string\") {\n      return undefined;\n    }\n\n    if (!this._chatMessageAbortControllers.has(id)) {\n      this._chatMessageAbortControllers.set(id, new AbortController());\n    }\n\n    return this._chatMessageAbortControllers.get(id)?.signal;\n  }\n\n  /**\n   * Remove an abort controller from the cache of pending message responses\n   */\n  private _removeAbortController(id: string) {\n    this._chatMessageAbortControllers.delete(id);\n  }\n\n  /**\n   * Propagate an abort signal for any requests associated with the given message id\n   */\n  private _cancelChatRequest(id: string) {\n    if (this._chatMessageAbortControllers.has(id)) {\n      const abortController = this._chatMessageAbortControllers.get(id);\n      abortController?.abort();\n    }\n  }\n\n  /**\n   * Abort all pending requests and clear the cache of AbortControllers\n   */\n  private _destroyAbortControllers() {\n    for (const controller of this._chatMessageAbortControllers.values()) {\n      controller?.abort();\n    }\n    this._chatMessageAbortControllers.clear();\n  }\n\n  /**\n   * When the DO is destroyed, cancel all pending requests\n   */\n  async destroy() {\n    this._destroyAbortControllers();\n    await super.destroy();\n  }\n}\n"],"mappings":";;;;;;;;AAmBA,MAAM,UAAU,IAAI,aAAa;;;;;AAMjC,IAAa,cAAb,cAAiE,MAG/D;CAQA,YAAY,KAAmB,KAAU;AACvC,QAAM,KAAK,IAAI;AACf,OAAK,GAAG;;;;;AAUR,OAAK,WAAW,sBAHI,KAAK,qBAAqB,CAGI;AAElD,OAAK,+CAA+B,IAAI,KAAK;;CAG/C,AAAQ,sBAAsB,SAA0B,SAAoB;AAC1E,OAAK,UAAU,KAAK,UAAU,QAAQ,EAAE,QAAQ;;CAGlD,AAAQ,sBAAqC;AAI3C,UAFE,KAAK,GAAG,iEACR,EAAE,EAED,KAAK,QAAQ;AACZ,OAAI;AACF,WAAO,KAAK,MAAM,IAAI,QAAkB;YACjC,OAAO;AACd,YAAQ,MAAM,2BAA2B,IAAI,GAAG,IAAI,MAAM;AAC1D,WAAO;;IAET,CACD,QAAQ,QAA4B,QAAQ,KAAK;;CAGtD,MAAe,UAAU,YAAwB,SAAoB;AACnE,MAAI,OAAO,YAAY,UAAU;GAC/B,IAAIA;AACJ,OAAI;AACF,WAAO,KAAK,MAAM,QAAQ;YACnB,QAAQ;AAGf;;AAEF,OACE,KAAK,SAAS,YAAY,6BAC1B,KAAK,KAAK,WAAW,QACrB;IACA,MAAM,EAIJ,SAKE,KAAK;IACT,MAAM,EAAE,aAAa,KAAK,MAAM,KAAe;IAG/C,MAAM,sBAAsB,sBAAsB,SAAS;AAE3D,SAAK,sBACH;KACE,UAAU;KACV,MAAM,YAAY;KACnB,EACD,CAAC,WAAW,GAAG,CAChB;AAED,UAAM,KAAK,gBAAgB,qBAAqB,CAAC,WAAW,GAAG,CAAC;AAEhE,SAAK,eAAe,KAClB;KACE,gBAAgB;KAChB,IAAI,KAAK;KACT,SAAS,EAAE;KACX,WAAW,KAAK,KAAK;KACrB,MAAM;KACP,EACD,KAAK,IACN;IAED,MAAM,gBAAgB,KAAK;IAC3B,MAAM,cAAc,KAAK,gBAAgB,cAAc;AAEvD,WAAO,KAAK,cAAc,YAAY;KACpC,MAAM,WAAW,MAAM,KAAK,cAC1B,OAAO,kBAAkB;AACvB,WAAK,uBAAuB,cAAc;AAE1C,WAAK,eAAe,KAClB;OACE,gBAAgB;OAChB,IAAI,KAAK;OACT,SAAS,EAAE;OACX,WAAW,KAAK,KAAK;OACrB,MAAM;OACP,EACD,KAAK,IACN;QAKH,cAAc,EAAE,aAAa,GAAG,OACjC;AAED,SAAI,SACF,OAAM,KAAK,OAAO,KAAK,IAAI,SAAS;UAC/B;AAEL,cAAQ,KACN,uEAAuE,gBACxE;AAED,WAAK,sBACH;OACE,MAAM;OACN,MAAM;OACN,IAAI,KAAK;OACT,MAAM,YAAY;OACnB,EACD,CAAC,WAAW,GAAG,CAChB;;MAEH;;AAEJ,OAAI,KAAK,SAAS,YAAY,qBAAqB;AACjD,SAAK,0BAA0B;AAC/B,SAAK,GAAG;AACR,SAAK,WAAW,EAAE;AAClB,SAAK,sBACH,EACE,MAAM,YAAY,qBACnB,EACD,CAAC,WAAW,GAAG,CAChB;cACQ,KAAK,SAAS,YAAY,wBAAwB;IAE3D,MAAM,sBAAsB,sBAAsB,KAAK,SAAS;AAChE,UAAM,KAAK,gBAAgB,qBAAqB,CAAC,WAAW,GAAG,CAAC;cACvD,KAAK,SAAS,YAAY,6BAEnC,MAAK,mBAAmB,KAAK,GAAG;;;CAKtC,MAAe,UAAU,SAAqC;AAC5D,SAAO,KAAK,oBAAoB;AAE9B,OADY,IAAI,IAAI,QAAQ,IAAI,CACxB,SAAS,SAAS,gBAAgB,EAAE;IAC1C,MAAM,WAAW,KAAK,qBAAqB;AAC3C,WAAO,SAAS,KAAK,SAAS;;AAEhC,UAAO,MAAM,UAAU,QAAQ;IAC/B;;CAGJ,MAAc,cAAiB,IAA0B;AACvD,MAAI;AACF,UAAO,MAAM,IAAI;WACV,GAAG;AACV,SAAM,KAAK,QAAQ,EAAE;;;;;;;;;CAUzB,MAAM,cAEJ,UAEA,SAC+B;AAC/B,QAAM,IAAI,MACR,8FACD;;;;;;CAOH,MAAM,aAAa,UAAyB;AAC1C,QAAM,KAAK,gBAAgB,SAAS;AACpC,QAAM,KAAK,cAAc,YAAY;GACnC,MAAM,WAAW,MAAM,KAAK,oBAAoB,GAAG;AACnD,OAAI,SAAU,MAAK,OAAO,OAAO,YAAY,EAAE,SAAS;IACxD;;CAGJ,MAAM,gBACJ,UACA,sBAAgC,EAAE,EAClC;AACA,OAAK,MAAM,WAAW,SACpB,MAAK,GAAG;;kBAEI,QAAQ,GAAG,IAAI,KAAK,UAAU,QAAQ,CAAC;;;AAOrD,OAAK,WAAW,sBADE,KAAK,qBAAqB,CACI;AAChD,OAAK,sBACH;GACY;GACV,MAAM,YAAY;GACnB,EACD,oBACD;;CAGH,MAAc,OAAO,IAAY,UAAoB;AACnD,SAAO,KAAK,cAAc,YAAY;AACpC,OAAI,CAAC,SAAS,MAAM;AAElB,SAAK,sBAAsB;KACzB,MAAM;KACN,MAAM;KACN;KACA,MAAM,YAAY;KACnB,CAAC;AACF;;GASF,MAAM,EAAE,aAAa,cAAc,qBAAqB,MAAM,OAC5D;GAGF,MAAM,SAAS,SAAS,KAAK,WAAW;GAIxC,MAAMC,UAAuB;IAC3B,IAAI,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,QAAQ,CAAC,SAAS,GAAG,CAAC,MAAM,GAAG,GAAG;IACtE,MAAM;IACN,OAAO,EAAE;IACV;GACD,IAAIC,kBAA8C,EAAE;GACpD,IAAIC,uBAAwD,EAAE;GAC9D,MAAMC,mBAGF,EAAE;GAEN,SAAS,sBACP,SA2BA;IACA,MAAM,OAAO,QAAQ,MAAM,MACxB,WACCC,OAAK,SAAS,kBACdA,OAAK,eAAe,QAAQ,WAC/B;IAED,MAAM,aAAa;IACnB,MAAM,UAAU;AAEhB,QAAI,QAAQ,MAAM;AAChB,UAAK,QAAQ,QAAQ;AACrB,aAAQ,WAAW,QAAQ;AAC3B,aAAQ,QAAQ,WAAW;AAC3B,aAAQ,SAAS,WAAW;AAC5B,aAAQ,YAAY,WAAW;AAC/B,aAAQ,WAAW,WAAW,YAAY,QAAQ;AAClD,aAAQ,cAAc,WAAW;AAEjC,SACE,WAAW,oBAAoB,QAC/B,KAAK,UAAU,kBAEf,MAAK,uBACH,WAAW;UAGf,SAAQ,MAAM,KAAK;KACjB,MAAM;KACN,UAAU,QAAQ;KAClB,YAAY,QAAQ;KACpB,OAAO,QAAQ;KACf,OAAO,WAAW;KAClB,QAAQ,WAAW;KACnB,WAAW,WAAW;KACtB,aAAa,WAAW;KACxB,GAAI,WAAW,oBAAoB,OAC/B,EAAE,sBAAsB,WAAW,kBAAkB,GACrD,EAAE;KACP,CAAsB;;GAI3B,SAAS,eACP,SAgCA;IACA,MAAM,OAAO,QAAQ,MAAM,MACxB,WACC,aAAaA,OAAK,IACjBA,OAAoB,eAAe,QAAQ,WAC/C;IAED,MAAM,aAAa;IACnB,MAAM,UAAU;AAEhB,QAAI,QAAQ,MAAM;AAChB,UAAK,QAAQ,QAAQ;AACrB,aAAQ,QAAQ,WAAW;AAC3B,aAAQ,SAAS,WAAW;AAC5B,aAAQ,YAAY,WAAW;AAC/B,aAAQ,WAAW,WAAW;AAC9B,aAAQ,cAAc,WAAW;AAGjC,aAAQ,mBACN,WAAW,oBAAoB,KAAK;AAEtC,SACE,WAAW,oBAAoB,QAC/B,KAAK,UAAU,kBAEf,MAAK,uBACH,WAAW;UAGf,SAAQ,MAAM,KAAK;KACjB,MAAM,QAAQ,QAAQ;KACtB,YAAY,QAAQ;KACpB,OAAO,QAAQ;KACf,OAAO,WAAW;KAClB,QAAQ,WAAW;KACnB,UAAU,WAAW;KACrB,WAAW,WAAW;KACtB,kBAAkB,WAAW;KAC7B,aAAa,WAAW;KACxB,GAAI,WAAW,oBAAoB,OAC/B,EAAE,sBAAsB,WAAW,kBAAkB,GACrD,EAAE;KACP,CAAe;;GAIpB,eAAe,sBAAsB,UAAmB;AACtD,QAAI,YAAY,KAMd,SAAQ,WAJN,QAAQ,YAAY,OAChB;KAAE,GAAG,QAAQ;KAAU,GAAG;KAAU,GACpC;;AAMV,OAAI;AACF,WAAO,MAAM;KACX,MAAM,EAAE,MAAM,UAAU,MAAM,OAAO,MAAM;AAC3C,SAAI,MAAM;AAER,WAAK,sBAAsB;OACzB,MAAM;OACN,MAAM;OACN;OACA,MAAM,YAAY;OACnB,CAAC;AACF;;KAGF,MAAM,QAAQ,QAAQ,OAAO,MAAM;AAOnC,UAJoB,SAAS,QAAQ,IAAI,eAAe,IAAI,IAClC,SAAS,oBAAoB,EAG5C;MAET,MAAM,QAAQ,MAAM,MAAM,KAAK;AAC/B,WAAK,MAAM,QAAQ,MACjB,KAAI,KAAK,WAAW,SAAS,IAAI,SAAS,eACxC,KAAI;OACF,MAAMC,OAAuB,KAAK,MAAM,KAAK,MAAM,EAAE,CAAC;AACtD,eAAQ,KAAK,MAAb;QACE,KAAK,cAAc;SACjB,MAAMC,WAAuB;UAC3B,MAAM;UACN,MAAM;UACN,kBAAkB,KAAK;UACvB,OAAO;UACR;AACD,yBAAgB,KAAK,MAAM;AAC3B,iBAAQ,MAAM,KAAK,SAAS;AAC5B;;QAGF,KAAK,cAAc;SACjB,MAAM,WAAW,gBAAgB,KAAK;AACtC,kBAAS,QAAQ,KAAK;AACtB,kBAAS,mBACP,KAAK,oBAAoB,SAAS;AACpC;;QAGF,KAAK,YAAY;SACf,MAAM,WAAW,gBAAgB,KAAK;AACtC,kBAAS,QAAQ;AACjB,kBAAS,mBACP,KAAK,oBAAoB,SAAS;AACpC,gBAAO,gBAAgB,KAAK;AAC5B;;QAGF,KAAK,mBAAmB;SACtB,MAAMC,gBAAiC;UACrC,MAAM;UACN,MAAM;UACN,kBAAkB,KAAK;UACvB,OAAO;UACR;AACD,8BAAqB,KAAK,MAAM;AAChC,iBAAQ,MAAM,KAAK,cAAc;AACjC;;QAGF,KAAK,mBAAmB;SACtB,MAAM,gBAAgB,qBAAqB,KAAK;AAChD,uBAAc,QAAQ,KAAK;AAC3B,uBAAc,mBACZ,KAAK,oBAAoB,cAAc;AACzC;;QAGF,KAAK,iBAAiB;SACpB,MAAM,gBAAgB,qBAAqB,KAAK;AAChD,uBAAc,mBACZ,KAAK,oBAAoB,cAAc;AACzC,uBAAc,QAAQ;AACtB,gBAAO,qBAAqB,KAAK;AAEjC;;QAGF,KAAK;AACH,iBAAQ,MAAM,KAAK;UACjB,MAAM;UACN,WAAW,KAAK;UAChB,KAAK,KAAK;UACX,CAAC;AAEF;QAGF,KAAK;AACH,iBAAQ,MAAM,KAAK;UACjB,MAAM;UACN,UAAU,KAAK;UACf,KAAK,KAAK;UACV,OAAO,KAAK;UACZ,kBAAkB,KAAK;UACxB,CAAC;AAEF;QAGF,KAAK;AACH,iBAAQ,MAAM,KAAK;UACjB,MAAM;UACN,UAAU,KAAK;UACf,WAAW,KAAK;UAChB,OAAO,KAAK;UACZ,UAAU,KAAK;UACf,kBAAkB,KAAK;UACxB,CAAC;AAEF;QAGF,KAAK,oBAAoB;SACvB,MAAM,kBACJ,QAAQ,MAAM,OAAO,aAAa;AAGpC,0BAAiB,KAAK,cAAc;UAClC,MAAM;UACN,UAAU,KAAK;UACf,OAAO,gBAAgB;UACvB,SAAS,KAAK;UACf;AAED,aAAI,KAAK,QACP,uBAAsB;UACpB,YAAY,KAAK;UACjB,UAAU,KAAK;UACf,OAAO;UACP,OAAO;UACR,CAAC;aAEF,gBAAe;UACb,YAAY,KAAK;UACjB,UAAU,KAAK;UACf,OAAO;UACP,OAAO;UACR,CAAC;AAGJ;;QAGF,KAAK,oBAAoB;SACvB,MAAM,kBAAkB,iBAAiB,KAAK;AAE9C,yBAAgB,QAAQ,KAAK;SAK7B,MAAM,eAHoB,MAAM,iBAC9B,gBAAgB,KACjB,EAGC;AAEF,aAAI,gBAAgB,QAClB,uBAAsB;UACpB,YAAY,KAAK;UACjB,UAAU,gBAAgB;UAC1B,OAAO;UACP,OAAO;UACR,CAAC;aAEF,gBAAe;UACb,YAAY,KAAK;UACjB,UAAU,gBAAgB;UAC1B,OAAO;UACP,OAAO;UACR,CAAC;AAGJ;;QAGF,KAAK;AACH,aAAI,KAAK,QACP,uBAAsB;UACpB,YAAY,KAAK;UACjB,UAAU,KAAK;UACf,OAAO;UACP,OAAO,KAAK;UACZ,kBAAkB,KAAK;UACxB,CAAC;aAEF,gBAAe;UACb,YAAY,KAAK;UACjB,UAAU,KAAK;UACf,OAAO;UACP,OAAO,KAAK;UACZ,kBAAkB,KAAK;UACvB,kBAAkB,KAAK;UACxB,CAAC;AAcJ;QAGF,KAAK;AACH,aAAI,KAAK,QACP,uBAAsB;UACpB,YAAY,KAAK;UACjB,UAAU,KAAK;UACf,OAAO;UACP,OAAO,KAAK;UACZ,WAAW,KAAK;UAChB,kBAAkB,KAAK;UACxB,CAAC;aAEF,gBAAe;UACb,YAAY,KAAK;UACjB,UAAU,KAAK;UACf,OAAO;UACP,OAAO;UACP,UAAU,KAAK;UACf,WAAW,KAAK;UAChB,kBAAkB,KAAK;UACvB,kBAAkB,KAAK;UACxB,CAAC;AAGJ;QAGF,KAAK;AACH,aAAI,KAAK,SAAS;UAKhB,MAAM,iBAJkB,QAAQ,MAAM,QACnC,SAAS,KAAK,SAAS,eACzB,CAEsC,MACpC,eACC,WAAW,eAAe,KAAK,WAClC;AAED,cAAI,CAAC,eACH,OAAM,IAAI,MAAM,4BAA4B;AAE9C,gCAAsB;WACpB,YAAY,KAAK;WACjB,UAAU,eAAe;WACzB,OAAO;WACP,OAAO,eAAe;WACtB,QAAQ,KAAK;WACb,aAAa,KAAK;WACnB,CAAC;gBACG;UAKL,MAAM,iBAJkB,QAAQ,MAAM,OACpC,aACD,CAEsC,MACpC,eACC,WAAW,eAAe,KAAK,WAClC;AAED,cAAI,CAAC,eACH,OAAM,IAAI,MAAM,4BAA4B;AAE9C,yBAAe;WACb,YAAY,KAAK;WACjB,UAAU,YAAY,eAAe;WACrC,OAAO;WACP,OAAO,eAAe;WACtB,QAAQ,KAAK;WACb,kBAAkB,KAAK;WACvB,aAAa,KAAK;WACnB,CAAC;;AAGJ;QAGF,KAAK;AACH,aAAI,KAAK,SAAS;UAKhB,MAAM,iBAJkB,QAAQ,MAAM,QACnC,SAAS,KAAK,SAAS,eACzB,CAEsC,MACpC,eACC,WAAW,eAAe,KAAK,WAClC;AAED,cAAI,CAAC,eACH,OAAM,IAAI,MAAM,4BAA4B;AAE9C,gCAAsB;WACpB,YAAY,KAAK;WACjB,UAAU,eAAe;WACzB,OAAO;WACP,OAAO,eAAe;WACtB,WAAW,KAAK;WACjB,CAAC;gBACG;UAKL,MAAM,iBAJkB,QAAQ,MAAM,OACpC,aACD,CAEsC,MACpC,eACC,WAAW,eAAe,KAAK,WAClC;AAED,cAAI,CAAC,eACH,OAAM,IAAI,MAAM,4BAA4B;AAC9C,yBAAe;WACb,YAAY,KAAK;WACjB,UAAU,YAAY,eAAe;WACrC,OAAO;WACP,OAAO,eAAe;WACtB,UACE,cAAc,iBACV,eAAe,WACf;WACN,WAAW,KAAK;WACjB,CAAC;;AAGJ;QAGF,KAAK;AAEH,iBAAQ,MAAM,KAAK,EAAE,MAAM,cAAc,CAAC;AAC1C;QAGF,KAAK;AAEH,2BAAkB,EAAE;AACpB,gCAAuB,EAAE;AACzB;QAGF,KAAK;AACH,aAAI,KAAK,aAAa,KACpB,SAAQ,KAAK,KAAK;AAGpB,eAAM,sBAAsB,KAAK,gBAAgB;AAEjD;QAGF,KAAK;AACH,eAAM,sBAAsB,KAAK,gBAAgB;AACjD;QAGF,KAAK;AACH,eAAM,sBAAsB,KAAK,gBAAgB;AACjD;QAGF,KAAK;AACH,cAAK,sBAAsB;UACzB,OAAO;UACP,MAAM,KAAK,aAAa,KAAK,UAAU,KAAK;UAC5C,MAAM;UACN;UACA,MAAM,YAAY;UACnB,CAAC;AAEF;;AAMJ,YAAK,sBAAsB;QACzB,MAAM,KAAK,UAAU,KAAK;QAC1B,MAAM;QACN;QACA,MAAM,YAAY;QACnB,CAAC;eACK,IAAI;gBAQb,MAAM,SAAS,GAAG;AACpB,cAAQ,MAAM,KAAK;OAAE,MAAM;OAAQ,MAAM;OAAO,CAAC;AAEjD,WAAK,sBAAsB;OACzB,MAAM,KAAK,UAAU;QAAE,MAAM;QAAc,OAAO;QAAO,CAAC;OAC1D,MAAM;OACN;OACA,MAAM,YAAY;OACnB,CAAC;;;aAIA;AACR,WAAO,aAAa;;AAGtB,OAAI,QAAQ,MAAM,SAAS,EACzB,OAAM,KAAK,gBAAgB,CAAC,GAAG,KAAK,UAAU,QAAQ,CAAC;IAEzD;;;;;;;;CASJ,AAAQ,gBAAgB,IAAqC;AAE3D,MAAI,OAAO,OAAO,SAChB;AAGF,MAAI,CAAC,KAAK,6BAA6B,IAAI,GAAG,CAC5C,MAAK,6BAA6B,IAAI,IAAI,IAAI,iBAAiB,CAAC;AAGlE,SAAO,KAAK,6BAA6B,IAAI,GAAG,EAAE;;;;;CAMpD,AAAQ,uBAAuB,IAAY;AACzC,OAAK,6BAA6B,OAAO,GAAG;;;;;CAM9C,AAAQ,mBAAmB,IAAY;AACrC,MAAI,KAAK,6BAA6B,IAAI,GAAG,CAE3C,CADwB,KAAK,6BAA6B,IAAI,GAAG,EAChD,OAAO;;;;;CAO5B,AAAQ,2BAA2B;AACjC,OAAK,MAAM,cAAc,KAAK,6BAA6B,QAAQ,CACjE,aAAY,OAAO;AAErB,OAAK,6BAA6B,OAAO;;;;;CAM3C,MAAM,UAAU;AACd,OAAK,0BAA0B;AAC/B,QAAM,MAAM,SAAS"}